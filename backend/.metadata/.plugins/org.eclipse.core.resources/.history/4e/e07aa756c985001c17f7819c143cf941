package com.equiplano.seguro.rest;



import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.equiplano.seguro.dto.ApoliceDto;
import com.equiplano.seguro.model.Apolice;
import com.equiplano.seguro.persistence.ApolicePersistence;

@RestController
@RequestMapping("/api/apolice/consulta")
public class ConsultaApoliceRest {
	@Autowired
	private ApolicePersistence ap;
	
	
	@GetMapping("{numero}")
	public ResponseEntity<?> buscarApolice(@PathVariable("numero") Long numero){
		
	 int num = ap.existeApoliceNumero(numero);	 
	 if(num==0) {
		 return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Numero de apolice inexistente");
	 }
		
		Apolice a= new Apolice();
		a = ap.buscarPorNumero(numero);
		ApoliceDto dto = new ApoliceDto();
		dto = montarResposta(a);
		
				
		return ResponseEntity.status(HttpStatus.OK).body("Cadastro realizado com sucesso !");
	}
	
	
	
	
	
	public  ApoliceDto montarResposta(Apolice a ) {
		ApoliceDto dto = new ApoliceDto();
		
		
		// 1° Informar se a apolice venceu ou não
		  LocalDate hoje = LocalDate.now();
		
		
		
		// Calcula a diferença de dias entre as duas datas
        long diferencaEmDias = ChronoUnit.DAYS.between(hoje,a.getFim());
        
		
		
		
		return dto;
	}

}
